## 함수
### 함수의 개념
- 특정 작업을 수행하는 프로그램 문장들을 하나의 단위로 모아놓고 이름을 부여한 것
- 프로그램 해석 할 때의 가독성
- 반복 기능의 재사용 및 일괄 수정
- 매개변수를 통해 인수를 전달 -> 함수 블록을 내용을 수행 -> 결과값 반환
### 함수 사용 형식
```c++
RetureType FunctionName(FunctionParameterList)
{
  Type LocalVar //지역변수 선언가능
  ...
  do something
  ...
  return returnExpression //결과값 반환
}
```
- return
  - 함수를 마치고 함수를 호출한 곳으로 복귀하는 명령
  - 함수 안의 어느 곳이든 복귀를 위해 사용 가능
  - 함수의 리턴타입과 리턴값의 자료형은 동일해야함, 또는 묵시적 형변환이 가능한 자료형 수식을 사용
  - 리턴값이 없으면 함수 타입을 void로 선언
  - main 함수에서 끝에 return 명령을 작성하지 않으면 'return 0;' 을 실행한 것과 같음

- c++ 함수작성시 주의점
  - 함수를 사용하기 전에 선언해야 한다.
  - 만약 함수 정의부를 코드의 아래로 보내려면 함수의 원형을 미리 선언해주면 된다.
  - 함수의 원형
  ```
    ReturnType FunctionName(Parameters);
  ```
### 함수의 순환 호출(재귀함수)
- 함수 내부에서 함수 자신을 다시 호출하는 것
- 순환호출 예제 (팩토리얼)
```c++
int factorial(int n)
{
  if(n <= 1)
    return 1;
  else
    return n * factorial(n - 1); //순환호출함
}
```
### 함수의 장점과 단점
- 장점
  - 크고 복잡한 프로그램을 작은 크기의 의미 있는 작업단위로 분할하여 구성
    - 간결하고 이해하기 쉬운 프로그램을 만들 수 있음
  - 코드 중복 방지
  - 잘 설계된 함수는 다른 프로그램에도 재사용 가능
- 단점
  - 함수 호출과 복귀 과정에서 처리 시간이 추가됨(대부분 크게 영향은 주지 않는다)
  - 자주 호출되어야 해서 효율적으로 동작해야 하는 함수라면 inline함수로 선언
  
### 인수와 매개변수
- 인수
  - 함수 호출 문장에서 함수에 전달하는 식
    - 여러개의 인수가 있을 경우 콤마(,)로 구분하여 나열
  - 실 매개변수
    - 함수 호출 문장에서 함수의 형식 매개변수에 전달할 "인수"
  - 형식 매개변수
    - 인수를 전달 받기 위해 함수에 선언된 매개 변수
    - 함수 헤더에 매개변수의 자료형과 이름을 선언함
### 인수 전달 방식
  - 값 호출(call-by-value)
    - 실 매개변수의 값을 형식 매개변수에 복사하는 방식
    - 장점
      - 실매개변수와 매개변수는 별개의 데이터가 되므로 불필요한 부작용이 발생하지 않음
    - 단점
      - 구조체와 같이 많은 양의 데이터로 구성된 인수를 전달할 경우 데이터의 복사량이 많아짐
  - 참조 호출(call-by-reference)
    - 실 매개변수의 참조를 형식 매개변수에 전달하는 방식
    - 포인터를 전달하면 되지만 작성에 어려움이 있어서 c++에서 제공함
    - 함수에 처리한 결과를 매개변수를 통해 받아 오려는 경우
    - 참조호출의 용도
      - 함수에서 처리한 결과를 매개변수를 통해 받아오려는 경우
        - 함수에서 형식 매개변수의 값을 변경하는 것은 실 매개변수의 값을 변경하는 것과 같음
      - 많은 양의 데이터로 구성되는 구조체나 객체와 같은 인수를 함수에 효율적으로 전달하는 경우
        - 형식 매개변수에 복사되는 데이터의 양은 실 매개변수의 크기와 관계 없이 일정함
